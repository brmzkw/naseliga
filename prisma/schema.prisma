// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

//
// Next auth models
//
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//
// Naseliga models
//
model Event {
  id    Int      @id @default(autoincrement())
  title String   @default("") @db.VarChar
  date  DateTime @default(dbgenerated("CURRENT_DATE")) @db.Date

  matches Match[]

  @@map("events")
}

model Player {
  id      Int    @id @default(autoincrement())
  name    String @unique @db.VarChar
  country String @default("") @db.VarChar

  matchsA Match[] @relation("PlayerA")
  matchsB Match[] @relation("PlayerB")

  @@map("players")
}

model Match {
  id        Int @id @default(autoincrement())
  eventId   Int @map("event")
  playerAId Int @map("player_a")
  playerBId Int @map("player_b")
  scoreA    Int @map("score_a")
  scoreB    Int @map("score_b")

  event   Event    @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_event")
  playerA Player   @relation("PlayerA", fields: [playerAId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_player_a")
  playerB Player   @relation("PlayerB", fields: [playerBId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_player_b")
  ranking Ranking?

  @@map("matches")
}

model Ranking {
  matchId Int @id @map("match")
  rankA   Int @map("rank_a")
  rankB   Int @map("rank_b")

  match Match @relation(fields: [matchId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_event")

  @@map("rankings")
}
